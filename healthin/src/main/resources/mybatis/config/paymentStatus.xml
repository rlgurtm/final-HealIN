<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="paymentStatus">
	<resultMap type="payVO" id="payRM">
		<result property="trainerId.membervo.id" column="id" />
		<result property="trainerId.membervo.nickname" column="nickname" />
	</resultMap>
 	<select id="getPaymentList" resultMap="payRM" parameterType="map">
 	   select r.* from(
			select row_number() over(order by pay_no desc) rnum, 
			p.pay_no as payNo, p.user_id as userId, p.price, p.pay_date as payDate, p.pay_state as payState, p.period, hm.id, hm.nickname
			from pay p, health_user hu, trainer t, health_member hm
			where p.user_id = hu.user_id and hm.id = t.trainer_id
			and p.trainer_id = t.trainer_id and hu.user_id = #{id}
		) r
		where rnum between #{startRowNumber} and #{endRowNumber} order by rnum asc
 	</select>
 	<select id="getUsersPaymentList" resultType="payVO" parameterType="map">
 	   select r.* from(
			select row_number() over(order by pay_no desc) rnum, 
			p.pay_no as payNo, p.user_id as userId, p.price, p.pay_date as payDate, p.pay_state as payState, p.period, p.trainer_id as trainerId
			from pay p, health_user hu, trainer t
			where p.user_id = hu.user_id and p.trainer_id = t.trainer_id and t.trainer_id = #{id}
		) r
		where rnum between #{startRowNumber} and #{endRowNumber} order by rnum asc
 	</select>
 	<select id="getTotalCountOfContent" resultType="int" parameterType="string">
 		select count(*) from pay p, health_user hu 
 		where p.user_id = hu.user_id and hu.user_id = #{value}
 	</select>
 	<select id="getTotalCountOfUsersContent" resultType="int" parameterType="string">
 		select count(*) from pay p, trainer t
		where p.trainer_id = t.trainer_id and  t.trainer_id = #{value}
 	</select>
 	<update id="updateUserPayStatus" parameterType="map">
 		update pay set pay_state = '입금완료', pay_date = sysdate 
 		where user_id = #{userId} and trainer_id = #{trainerId}
 	</update>
 	<insert id="rating" parameterType="map">
 		insert into trainer_rate 
		values(#{userId}, #{trainerId}, #{rate}, #{content}, sysdate)
 	</insert>
 	<select id="isExistRating" resultType="string" parameterType="map">
 		select trainer_id as trainerId from trainer_rate tr, health_user hu 
 		where tr.user_id = hu.user_id and tr.user_id = #{userId}
 	</select>
 	<update id="updateRatingStatus">
 	
 	</update>
 	
 	<!-- <insert id="payInsert" parameterType="map">
 	 <selectKey keyProperty="no" resultType="int" order="BEFORE">
         select pay_no_seq.nextval from dual
      </selectKey> 
 	insert into pay
 	values(#{no},#{price},sysdate,'입금대기',#{userId},#{trainerId},#{period})
 	</insert>
 	
 	
 	<select id="userTrainerPay" parameterType="map" resultType="payVO">
		select pay_no as payNo,price,to_char(pay_date,'YY-MM-DD HH:MM' )as payDate,
		pay_state as payState,user_id as userId,trainer_id as trainerId,period
		from pay where user_id=#{userId} and trainer_id=#{trainerId} 	
 	</select>
 	<update id="userDepositUpate" parameterType="map">
 		update pay set pay_state='입금완료',pay_date=sysdate where user_id=#{userId} and trainer_id=#{trainerId}
 	</update>
 	<select id="countExistMatching" parameterType="map" resultType="int">
 		select count(*)from matching where trainer_id=#{trainerId} and user_id=#{userId}
		and apply_result='Y' and accept_result='Y'
 	</select>
 	<select id="countExistMatching1" parameterType="map" resultType="int">
 		select count(*)from matching where trainer_id=#{trainerId} and user_id=#{userId}
		and apply_result='Y' and accept_result='N'
 	</select>
 	<select id="selectAcceptState" parameterType="map" resultType="String">
 	select accept_result
 	from following
 	where user_id=#{USERID} and trainer_id=#{TRAINERID}
 	</select>
 	
 	<update id="updateAcceptState" parameterType="map">
 	update following set accept_result=#{STATE}
 	where user_id=#{USERID} and trainer_id=#{TRAINERID}
 	</update> -->
</mapper>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
















